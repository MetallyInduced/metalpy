[build-system]
requires = ["setuptools>=63.0", "versioningit>=2.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "metalpy"
authors = [
    { name="yanang007", email="yanang007@gmail.com" },
]
description = "Essential tools and libraries for SimPEG and related workflows."
readme = "README-pypi.md"
requires-python = ">=3.9"
license = { file = "LICENSE.txt" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
dependencies = []

dynamic = ['version']

[project.optional-dependencies]
tests = ["metalpy[complete]", "pytest"]
docs = ["sphinx"]
pure = []
utils = [
    "numpy",
    'blosc2 >= 0.4.0',
    "cloudpickle",
    "tqdm",
]
mexin = []
mepa = [
    "loky",
    "distributed",
    "psutil",
]
carto = [
    "numpy",
    "pillow",
    "imageio",
    "requests",
    "pyproj",
    "rasterio",
    "affine",
]
aero = [
    "piexif",
]
scab = [
    "metalpy[mepa, mexin, utils]",
    # scientific
    "SimPEG >= 0.18",
    "discretize",
    "numpy",
    "pandas",
    "scipy",
    "scikit-learn",
    # visualization
    "pyvista",
    "matplotlib",
    "colour",
    # computational
    "taichi >= 1.6.0",
    # utils
    "properties",
    "pympler",
    "psutil",
    'blosc2 >= 0.4.0',
    "tqdm",
]
complete = [
    "metalpy[mepa, mexin, scab, carto, utils]",
]
dev = [
    "metalpy[complete, tests, docs]",
    "nox",
    "versioningit",
    "tomli",
    "build",
]

[tool.setuptools.packages.find]
include = ["metalpy*"]

[tool.versioningit.format]
# Format used when there have been commits since the most recent tag:
distance = "{base_version}.post{distance}+{vcs}{rev}"
# Format used when there are uncommitted changes:
dirty = "{base_version}+d{build_date:%Y%m%d}"
# Format used when there are both commits and uncommitted changes:
distance-dirty = "{base_version}.post{distance}+{vcs}{rev}.d{build_date:%Y%m%d}"

[tool.versioningit.template-fields.version-tuple]
pep440 = true

[tool.versioningit.onbuild]
source-file = "metalpy/_version.py"
build-file = "metalpy/_version.py"
require-match = true
regex = '^(\s*__version__,\s*__version_tuple__\s*=\s*.*?[\r\n]+)'
replacement = "__version__ = '{version}'\n__version_tuple__ = {version_tuple}\n"
