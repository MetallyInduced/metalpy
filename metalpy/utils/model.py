import numpy as np
import tqdm

from .algos import QuickUnion, ConnectedTriangleSurfaces


def split_model_file(model_file):
    if model_file.endswith('.obj'):
        with open(model_file, 'r') as f:
            content = f.read()
            if content.startswith('# WaveFront *.obj file (generated by Autodesk ATF)'):
                pass


def split_models_in_memory(model):
    models = split_models_in_memory_pointwisely(model)
    for m in models:
        ms = split_models_in_memory_edgewisely(m)


def split_models_in_memory_edgewisely(model):
    points = ConnectedTriangleSurfaces()
    model_faces = model.faces
    i = 0
    faces_size = len(model_faces)
    progress = tqdm.tqdm(total=faces_size)
    while i < faces_size:
        nv = model_faces[i]
        pts = model_faces[i + 1:i + nv + 1]
        i = i + nv + 1
        points.add(pts)
        progress.update(nv + 1)

    models = []
    for g in tqdm.tqdm(points.get_groups()[:10]):
        indices = np.asarray(g)
        models.append(model.extract_points(indices, adjacent_cells=False))

    return models


def split_models_in_memory_pointwisely(model):
    """Deprecated
    按点连通性来划分子几何体，对一些情况无法适用，已弃用
    """
    unions = QuickUnion(model.points.shape[0])
    model_faces = model.faces
    i = 0
    faces_size = len(model_faces)
    progress = tqdm.tqdm(total=faces_size)
    while i < faces_size:
        nv = model_faces[i]
        pts = model_faces[i + 1:i + nv + 1]
        i = i + nv + 1
        progress.update(nv + 1)
        p1 = pts[0]
        for p2 in pts[1:]:
            unions.connect(p1, p2)

    unions.collapse()
    groups = np.unique(unions.unions)

    models = []
    for g in tqdm.tqdm(groups[:10]):
        indices = np.argwhere(unions.unions == g).squeeze()
        models.append(model.extract_points(indices, adjacent_cells=False))

    return models
